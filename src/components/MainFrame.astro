---
// md:h-[43.7rem] md:w-[25rem] md:w-[100rem]
---

<div class="grid gap-10">
  <div
    class="canvas-container mx-auto h-[30rem] w-[20rem] border border-solid border-pure-black bg-transparent dark:border-pure-white md:h-[43.7rem] md:w-[25rem]"
  >
    <!-- <canvas id="my-canvas" class=""> </canvas> -->
  </div>
  <div
    class="w-[20rem] border border-pure-black p-4 dark:border-pure-white md:w-[25rem]"
  >
    <h2>Wall Drawing #11 (1969)</h2>
    <p class="text-xs">
      A wall divided horizontally and vertically into four equal parts. Within
      each part, three of the four kinds of lines are superimposed.
    </p>
  </div>
</div>
<script>
  import p5 from "p5";
  import { gsap } from "gsap";
  import palletes from "nice-color-palettes";

  const root = document.querySelector("html");
  const lightColor = "hsl(54, 100%, 94%)";
  const darkColor = "hsl(150, 7%, 6%)";
  const canvasContainer = document.querySelector(".canvas-container");
  const w = canvasContainer?.clientWidth;
  const h = canvasContainer?.clientHeight;

  let middleY: number;
  let middleX: number;
  let aspectRatio: number;

  let pallete: string[];
  let distance: number;
  let distanceX: number;
  let distanceY: number;

  new p5(function (p5) {
    p5.setup = function () {
      const cnv = p5.createCanvas(w, h);
      cnv.parent(canvasContainer);
      p5.frameRate(10);
      p5.noLoop();
      middleY = p5.height / 2;
      middleX = p5.width / 2;
      aspectRatio = p5.height / p5.width;
      pallete = p5.random(palletes);
      distance = Math.round(p5.random(3, 10));
      distanceX = middleX / distance;
      distanceY = middleY / distance;
      if (Math.round(distanceX) !== distanceX) {
        let tmp = middleX / Math.round(distanceX);
        distanceX = tmp;
      }
      if (Math.round(distanceY) !== distanceY) {
        let tmp = middleY / Math.round(distanceY);
        distanceY = tmp;
      }
    };
    p5.draw = function () {
      p5.clear();
      p5.background(p5.random(pallete) + "A0");

      function incrementOne(
        x1: number,
        y1: number,
        x2: number,
        y2: number,
        step: number,
      ) {
        p5.stroke(p5.random(pallete));

        for (let i = 0; i < middleX; i += step) {
          p5.line(x1 + i, y1, x2, y2 - i * aspectRatio);
        }
      }

      function incrementBoth(
        x1: number,
        y1: number,
        x2: number,
        y2: number,
        step: number,
      ) {
        p5.stroke(p5.random(pallete));

        for (let i = 0; i < middleX; i += step) {
          p5.line(x1 + i, y1, x2, y2 + i * aspectRatio);
        }
      }

      function decrementBoth(
        x1: number,
        y1: number,
        x2: number,
        y2: number,
        step: number,
      ) {
        p5.stroke(p5.random(pallete));
        for (let i = step; i < middleX; i += step) {
          p5.line(x1 - i, y1, x2, y2 - i * aspectRatio);
        }
      }

      function decrementOne(
        x1: number,
        y1: number,
        x2: number,
        y2: number,
        step: number,
      ) {
        p5.stroke(p5.random(pallete));
        for (let i = step; i < middleX; i += step) {
          p5.line(x1 - i, y1, x2, y2 + i * aspectRatio);
        }
      }

      function verticalLines(
        x1: number,
        y1: number,
        x2: number,
        y2: number,
        step: number,
      ) {
        p5.stroke(p5.random(pallete));
        console.log(`SOY DISTANCEX DESDE VERTICALLINES ${step}`);
        for (let i = 0; i <= middleX; i += step) {
          p5.line(x1 + i, y1, x2 + i, y2);
        }
      }

      function horizontalLines(
        x1: number,
        y1: number,
        x2: number,
        y2: number,
        step: number,
      ) {
        p5.stroke(p5.random(pallete));
        for (let i = 0; i < middleY; i += step) {
          p5.line(x1, y1 + i, x2, y2 + i);
        }
      }

      p5.stroke(root?.dataset.theme === "dark" ? lightColor : darkColor);
      // ---- CUADRANTE 1 ----
      incrementOne(0, 0, middleX, middleY, distanceX);
      incrementBoth(0, middleY, middleX, 0, distanceX);
      decrementBoth(middleX, 0, 0, middleY, distanceX);
      decrementOne(middleX, middleY, 0, 0, distanceX);
      verticalLines(0, 0, 0, middleY, distanceX);
      horizontalLines(0, 0, middleX, 0, distanceY);

      // // ---- CUADRANTE 2 ----
      incrementOne(middleX, 0, p5.width, middleY, distanceX);
      incrementBoth(middleX, middleY, p5.width, 0, distanceX);
      decrementBoth(p5.width, 0, middleX, middleY, distanceX);
      decrementOne(p5.width, middleY, middleX, 0, distanceX);
      horizontalLines(middleX, 0, p5.width, 0, distanceY);
      verticalLines(middleX, 0, middleX, middleY, distanceX);

      // // ---- CUADRANTE 3 ----
      incrementOne(0, middleY, middleX, p5.height, distanceX);
      incrementBoth(0, p5.height, middleX, middleY, distanceX);
      decrementBoth(middleX, middleY, 0, p5.height, distanceX);
      decrementOne(middleX, p5.height, 0, middleY, distanceX);
      horizontalLines(0, middleY, middleX, middleY, distanceY);
      verticalLines(0, middleY, 0, p5.height, distanceX);

      // // ---- CUADRANTE 4 ----
      incrementOne(middleX, middleY, p5.width, p5.height, distanceX);
      incrementBoth(middleX, p5.height, p5.width, middleY, distanceX);
      decrementBoth(p5.width, middleY, middleX, p5.height, distanceX);
      decrementOne(p5.width, p5.height, middleX, middleY, distanceX);
      verticalLines(middleX, middleY, middleX, p5.height, distanceX);
      horizontalLines(middleX, middleY, p5.width, middleY, distanceY);
    };
    p5.windowResized = function () {
      if (p5.windowWidth < 768) {
        const canvasContainer = document.querySelector(".canvas-container");
        const w = canvasContainer?.clientWidth;
        const h = canvasContainer?.clientHeight;
        p5.resizeCanvas(w, h);
      } else {
        const canvasContainer = document.querySelector(".canvas-container");
        const w = canvasContainer?.clientWidth;
        const h = canvasContainer?.clientHeight;
        p5.resizeCanvas(w, h);

        // aspectRatio2 = p5.width / p5.height;
      }
      middleY = p5.height / 2;
      middleX = p5.width / 2;
      aspectRatio = p5.height / p5.width;
      p5.clear();
      p5.redraw();
    };
  });

  gsap.from(".canvas-container", {
    autoAlpha: 0,
    duration: 2.5,
  });
</script>
