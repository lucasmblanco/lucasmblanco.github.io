---
import Icon from "astro-icon";
// md:h-[43.7rem] md:w-[25rem] md:w-[100rem]
---

<div class="grid gap-10">
  <div
    class="canvas-container mx-auto h-[30rem] w-[20rem] border border-solid border-pure-black bg-transparent dark:border-pure-white md:h-[43.7rem] md:w-[25rem]"
  >
  </div>
  <div
    class="draw-description w-[20rem] border border-pure-black p-4 dark:border-pure-white md:w-[25rem]"
  >
    <div class="flex justify-between">
      <h2>Wall Drawing #11 (1969)</h2>
      <a
        href="https://github.com/wholepixel/solving-sol/tree/master/011"
        target="_blank"
        class="sol-link"
        ><Icon
          class="sol-icon"
          name="grommet-icons:form-next-link"
          width="20"
        /></a
      >
    </div>

    <p class="text-xs">
      "A wall divided horizontally and vertically into four equal parts. Within
      each part, three of the four kinds of lines are superimposed."
    </p>
    <p class="text-right">Sol LeWitt</p>
  </div>
</div>
<script>
  import p5 from "p5";
  import { gsap } from "gsap";
  import palletes from "nice-color-palettes";
  import Quadrant from "../utils/Quadrant";

  const root = document.querySelector("html");
  const canvasContainer = document.querySelector(".canvas-container");
  const arrowIcon = document.querySelector(".sol-icon");
  const descriptionLink = document.querySelector(".sol-link");

  const lightColor = "hsl(54, 100%, 94%)";
  const darkColor = "hsl(150, 7%, 6%)";

  const w = canvasContainer?.clientWidth;
  const h = canvasContainer?.clientHeight;

  let middleY: number;
  let middleX: number;
  let aspectRatio: number;

  let pallete: string[];
  let distance: number;
  let distanceX: number;
  let distanceY: number;
  let Q1, Q2, Q3, Q4;

  new p5(function (p5) {
    p5.setup = function () {
      const cnv = p5.createCanvas(w, h);
      cnv.parent(canvasContainer);
      // p5.frameRate(10);
      p5.noLoop();
      middleY = p5.height / 2;
      middleX = p5.width / 2;
      aspectRatio = p5.height / p5.width;
      pallete = p5.random(palletes);
      distance = Math.round(p5.random(3, 10));
      distanceX = middleX / distance;
      distanceY = middleY / distance;
      if (Math.round(distanceX) !== distanceX) {
        let tmp = middleX / Math.round(distanceX);
        distanceX = tmp;
      }
      if (Math.round(distanceY) !== distanceY) {
        let tmp = middleY / Math.round(distanceY);
        distanceY = tmp;
      }
    };
    p5.draw = function () {
      p5.clear();
      p5.background(p5.random(pallete) + "A0");

      Q1 = new Quadrant(
        p5,
        0,
        0,
        middleX,
        middleY,
        distanceX,
        distanceY,
        aspectRatio,
        pallete,
      );

      Q2 = new Quadrant(
        p5,
        middleX,
        0,
        p5.width,
        middleY,
        distanceX,
        distanceY,
        aspectRatio,
        pallete,
      );
      Q3 = new Quadrant(
        p5,
        0,
        middleY,
        middleX,
        p5.height,
        distanceX,
        distanceY,
        aspectRatio,
        pallete,
      );
      Q4 = new Quadrant(
        p5,
        middleX,
        middleY,
        p5.width,
        p5.height,
        distanceX,
        distanceY,
        aspectRatio,
        pallete,
      );

      Q1.draw();
      Q2.draw();
      Q3.draw();
      Q4.draw();

      p5.stroke(root?.dataset.theme === "dark" ? lightColor : darkColor);
    };

    p5.windowResized = function () {
      if (p5.windowWidth < 768) {
        const canvasContainer = document.querySelector(".canvas-container");
        const w = canvasContainer?.clientWidth;
        const h = canvasContainer?.clientHeight;
        p5.resizeCanvas(w, h);
      } else {
        const canvasContainer = document.querySelector(".canvas-container");
        const w = canvasContainer?.clientWidth;
        const h = canvasContainer?.clientHeight;
        p5.resizeCanvas(w, h);
      }
      middleY = p5.height / 2;
      middleX = p5.width / 2;
      aspectRatio = p5.height / p5.width;
      p5.clear();
      p5.redraw();
    };
  });

  gsap.from(".canvas-container", {
    autoAlpha: 0,
    duration: 2.5,
  });

  let arrowAnimation = gsap.to(arrowIcon, {
    ease: "power4.In",
    paused: true,
    rotate: "-405deg",
    duration: 0.8,
  });

  gsap.from(".draw-description", {
    rotation: 0.01,
    duration: 1,
    y: 300,
    opacity: 0,
    ease: "power1.Out",
  });

  descriptionLink?.addEventListener("mouseenter", () => arrowAnimation.play());
  descriptionLink?.addEventListener("mouseleave", () =>
    arrowAnimation.reverse(),
  );
</script>
