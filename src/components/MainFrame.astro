---
import Icon from "astro-icon";
// md:h-[43.7rem] md:w-[25rem] md:w-[100rem]
// md:w-[25rem] ; h-[30rem]
// mx-auto w-[1000px] rounded-lg px-4 md:h-[43.7rem]
---

<section
  class="grid place-content-center gap-5 border-b-[1px] border-pure-black dark:border-al md:gap-10"
>
  <div class="canvas-container h-[60vh]"></div>

  <div
    class="draw-description grid w-full items-center gap-1 py-8 md:grid-flow-col"
  >
    <div class="grid text-center md:text-base">
      <h2 class="text-base md:text-2xl">Wall Drawing #11 (1969)</h2>
      <p class="text-center text-xxs md:text-xs">Sol LeWitt</p>
    </div>

    <div>
      <blockquote class="text-center text-xxs md:text-xs">
        A wall divided horizontally and vertically into four equal parts. Within
        each part, three of the four kinds of lines are superimposed.
      </blockquote>
    </div>
    <a
      href="https://solvingsol.com/"
      target="_blank"
      class="sol-link flex justify-center"
      ><Icon
        class="sol-icon w-5 md:w-10"
        name="grommet-icons:form-next-link"
      /></a
    >
  </div>
</section>
<style is:global>
  /* canvas {
    border-radius: 8px;
  } */
</style>
<script>
  import p5 from "p5";
  import { gsap } from "gsap";
  import palletes from "nice-color-palettes";
  import Quadrant from "../utils/Quadrant";

  const root = document.querySelector("html");
  const canvasContainer = document.querySelector(
    ".canvas-container",
  ) as HTMLDivElement;
  const mainContainer = document.querySelector("main") as HTMLDivElement;
  const arrowIcon = document.querySelector(".sol-icon");
  const descriptionLink = document.querySelector(".sol-link");

  const lightColor = "hsl(54, 100%, 94%)";
  const darkColor = "hsl(150, 7%, 6%)";

  // const w = canvasContainer?.offsetWidth;
  const h = canvasContainer?.offsetHeight;

  const w = mainContainer?.clientWidth;
  console.log(`ACA ESTA EL WIDTH DE MAIN ${w}`);
  // const h = mainContainer?.offsetHeight;

  let middleY: number;
  let middleX: number;
  let aspectRatio: number;

  let pallete: string[];
  let distance: number;
  let distanceX: number;
  let distanceY: number;
  let Q1, Q2, Q3, Q4;

  new p5(function (p5) {
    p5.setup = function () {
      // const cnv = p5.createCanvas(w, h);
      // const cnv = p5.createCanvas(1000, 699.2);
      const cnv = p5.createCanvas(w, h);

      cnv.parent(canvasContainer);
      // p5.frameRate(10);
      middleY = p5.height / 2;
      middleX = p5.width / 2;
      aspectRatio = p5.height / p5.width;
      pallete = p5.random(palletes);
      // distance = Math.round(p5.random(4, 6));
      // distance = Math.round(p5.random(3,));
      distance = 4;
      distanceX = Math.round(middleX / distance);
      distanceY = Math.round(middleY / distance);

      // if (Math.round(distanceX) !== distanceX) {
      //   console.log("TOCO");
      //   let tmp = middleX / Math.round(distanceX);
      //   distanceX = tmp;
      // }
      // if (Math.round(distanceY) !== distanceY) {
      //   console.log("TOCO2");
      //   let tmp = middleY / Math.round(distanceY);
      //   distanceY = tmp;
      // }

      // console.log(distanceX);

      p5.noLoop();
    };
    p5.draw = function () {
      p5.clear();
      // p5.background(p5.random(pallete) + "A0");
      // p5.background(p5.random(pallete) + "A0");
      Q1 = new Quadrant(
        p5,
        0,
        0,
        middleX,
        middleY,
        distanceX,
        distanceY,
        aspectRatio,
        pallete,
      );

      Q2 = new Quadrant(
        p5,
        middleX,
        0,
        p5.width,
        middleY,
        distanceX,
        distanceY,
        aspectRatio,
        pallete,
      );
      Q3 = new Quadrant(
        p5,
        0,
        middleY,
        middleX,
        p5.height,
        distanceX,
        distanceY,
        aspectRatio,
        pallete,
      );
      Q4 = new Quadrant(
        p5,
        middleX,
        middleY,
        p5.width,
        p5.height,
        distanceX,
        distanceY,
        aspectRatio,
        pallete,
      );

      Q1.draw();
      Q2.draw();
      Q3.draw();
      Q4.draw();

      // p5.stroke(root?.dataset.theme === "dark" ? lightColor : darkColor);
    };

    p5.windowResized = function () {
      const w = mainContainer?.clientWidth;
      const h = canvasContainer?.offsetHeight;
      p5.resizeCanvas(w, h);
      // if (w <= 900) {

      //   // p5.clear();
      //   // p5.redraw();
      // } else {
      //   p5.resizeCanvas(w, h);
      // }
      middleY = p5.height / 2;
      middleX = p5.width / 2;
      aspectRatio = p5.height / p5.width;
      distanceX = Math.round(middleX / distance);
      distanceY = Math.round(middleY / distance);
      console.log(distanceX);
      console.log(distanceY);
      // console.log(middleY);
      // console.log(middleX);
      // console.log(aspectRatio);
      // p5.clear();
      // p5.redraw();
      //   // 768
      //   // const canvasContainer = document.querySelector(
      //   //   ".canvas-container",
      //   // ) as HTMLDivElement;
      //   // // console.log(p5.windowWidth);
      //   // if (p5.windowWidth <= w) {
      //   //   const diff = (10 * 100) / p5.windowWidth;
      //   //   console.log("coso");
      //   //   // const canvasContainer = document.querySelector(".canvas-container");
      //   //   // const w = canvasContainer?.offsetWidth;
      //   //   // const h = canvasContainer?.offsetHeight;
      //   //   // console.log(w, h);
      //   //   // p5.resizeCanvas(w, h);
      //   //   console.log(diff);
      //   //   p5.resizeCanvas(p5.windowWidth - diff, 699.2);
      //   // }
      //   // // else {
      //   // //   // const canvasContainer = document.querySelector(".canvas-container");
      //   // //   const w = canvasContainer?.offsetWidth;
      //   // //   const h = canvasContainer?.offsetHeight;
      //   // //   p5.resizeCanvas(w, h);
      //   // // }
    };
  });

  gsap.from(".canvas-container", {
    autoAlpha: 0,
    duration: 2.5,
  });

  let arrowAnimation = gsap.to(arrowIcon, {
    ease: "sine.inOut",
    paused: true,
    // rotate: "-405deg",
    rotate: "320deg",
    scale: 3,
  });

  gsap.from(".draw-description", {
    // scrollTrigger: ".draw-description",
    rotation: 0.01,
    duration: 1,
    y: 50,
    opacity: 0,
    ease: "power1.Out",
  });

  descriptionLink?.addEventListener("mouseenter", () => arrowAnimation.play());
  descriptionLink?.addEventListener("mouseleave", () =>
    arrowAnimation.reverse(),
  );
</script>
