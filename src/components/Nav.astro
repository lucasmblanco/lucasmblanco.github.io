---
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<nav
  class="sticky top-0 z-50 mx-auto grid justify-center bg-transparent px-4 py-2 text-smoll backdrop-blur dark:backdrop-hue-rotate-180 md:justify-end md:text-xs md:backdrop-blur-0 md:backdrop-hue-rotate-0 md:dark:backdrop-hue-rotate-0"
>
  <ul
    class="grid grid-flow-col justify-items-end gap-2 md:grid-flow-row md:gap-1"
  >
    <li class="nav-list-item">
      <p class="flex justify-end gap-1">
        <a
          href={translatePath("/", "en")}
          class=`${getLangFromUrl(Astro.url) === "en" && 'underline'}`>en</a
        >
        <a
          href={translatePath("/", "es")}
          class=`${getLangFromUrl(Astro.url) === "es" && 'underline'}`>es</a
        >
      </p>
    </li>
    <li class="nav-list-item w-fit">
      <a href="#projects" class="hover-effect">
        <span> {t("nav.projects")}</span>
        <span
          class="underline-el dark:bg-al absolute bottom-0 left-0 block h-[1px] bg-pure-black"
        ></span>
      </a>
    </li>
    <li class="nav-list-item w-fit">
      <a
        href="https://docs.google.com/document/d/1MXRM9xi3P7pAaRqdSlBUE2L902qBaqYyRsly5ULosLU/edit?usp=sharing"
        target="_blank"
        class="hover-effect"
      >
        <span>{t("nav.cv")}</span>
        <span
          class="underline-el dark:bg-al absolute bottom-0 left-0 block h-[1px] bg-pure-black"
        ></span>
      </a>
    </li>
    <li class="nav-list-item w-fit">
      <a href="#contact" class="hover-effect">
        <span>{t("nav.contact")}</span>
        <span
          class="underline-el dark:bg-al absolute bottom-0 left-0 block h-[1px] bg-pure-black"
        ></span>
      </a>
    </li>
  </ul>
</nav>
<script>
  import { gsap } from "gsap";

  interface GSAPProps {
    width?: string;
    left?: string;
    duration?: string;
    immediateRender?: boolean;
  }
  interface ListItem extends HTMLLIElement {
    tl: {
      tweenFromTo: (pointA: number, pointB: string) => void;
      play: () => void;
      fromTo: (
        element: Element | null,
        propertieA: GSAPProps,
        propertieB: GSAPProps,
      ) => void;
      add: (point: string) => void;
    };
  }

  const listItems = document.querySelectorAll<ListItem>(".hover-effect");

  function enterAnimation(item: ListItem, e: MouseEvent) {
    item.tl.tweenFromTo(0, "midway");
  }

  function exitAnimation(item: ListItem, e: MouseEvent) {
    item.tl.play();
  }

  gsap.from(".nav-list-item", {
    rotation: 0.01,
    duration: 1,
    y: 100,
    opacity: 0,
    ease: "power1.Out",
    stagger: 0.3,
  });

  listItems.forEach((item: ListItem) => {
    const underline = item.querySelector(".underline-el");

    item.tl = gsap.timeline({ paused: true });

    item.tl.fromTo(
      underline,
      {
        width: "0%",
        left: "0%",
      },
      {
        width: "100%",
        duration: ".5",
      },
    );

    item.tl.add("midway");

    item.tl.fromTo(
      underline,
      {
        width: "100%",
        left: "0%",
      },
      {
        width: "0%",
        left: "100%",
        duration: ".5",
        immediateRender: false,
      },
    );

    item.addEventListener("mouseenter", (e) => {
      enterAnimation(item, e);
    });

    item.addEventListener("mouseleave", (e) => {
      exitAnimation(item, e);
    });
  });
</script>
