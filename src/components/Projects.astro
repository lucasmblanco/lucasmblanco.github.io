---
import { getLangFromUrl, useTranslations } from "../i18n/utils";

import supabase from "../lib/supabase";
import Table from "./Table.tsx";

const { data: projects } = await supabase
  .from("projects")
  .select("*")
  .order("id", { ascending: false });



const tableBody = [];
let startPosition = 0;

if (projects) {
  for (let i = 0; i < projects?.length; i++) {
    if (i === projects.length - 1) {
      tableBody.push([...projects.slice(startPosition, i + 1)]);
    }
    if (i % 6 === 0 && i !== 0) {
      tableBody.push([...projects.slice(startPosition, i)]);
      startPosition = i;
    }
  }
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section
  class="z-40 flex w-full flex-col bg-pure-white dark:bg-pure-black"
  id="projects"
>
  <Table
    title={t("projects.title")}
    subtitle={t("projects.subtitle")}
    data={tableBody}
    client:only="react"
  />
</section>

<!-- <script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import SplitType from "split-type";

  const tbodys = document.querySelectorAll("[data-tb]");
  const buttons = document.querySelectorAll("[data-buttontb");

  gsap.to(".character", {
    repeat: -1,
    x: -360,
    ease: "steps(8)",
    duration: 1,
  });

  // tbodys[0].style.position = "relative";

  buttons[0].style.textDecorationLine = "underline";

  const tl2 = gsap.timeline();

  buttons.forEach((button) => {
    button.addEventListener("click", (e) => {
      const tables = document.querySelectorAll("[data-tb]");
      buttons.forEach((button) => (button.style.textDecorationLine = "none"));
      e.target.style.textDecorationLine = "underline";
      tbodys.forEach((table) => {
        if (
          table.dataset.tb !== e.target.dataset.buttontb &&
          window.getComputedStyle(table, null).display !== "none"
        ) {
          tl2.fromTo(
            table,
            {
              xPercent: 0,
            },
            {
              xPercent: -100,
              display: "none",
              position: "absolute",
            },
          );
        }
      });
      tbodys.forEach((table) => {
        if (
          table.dataset.tb === e.target.dataset.buttontb &&
          window.getComputedStyle(table, null).display === "none"
        ) {
          console.log("HOLA ELSE IF ");
          tl2.fromTo(
            table,
            {
              xPercent: 100,
              opacity: 0,
            },
            {
              opacity: 1,
              xPercent: 0,
              display: "table-row-group",
              position: "relative",
            },
            "<",
          );
        }
      });
    });
  });

  // --- Hover effect with center positioning ---
  // const rows = document.querySelectorAll("tr");
  // const iconData = window.getComputedStyle(rows[0], ":after");
  // const iconHeight =
  //   Number(iconData.fontSize.split("px")[0]) +
  //   Number(iconData.fontSize.split("px")[0]) / 2;

  // rows.forEach((row) => {
  //   row.addEventListener("mouseover", () => {
  //     const diff = row.offsetHeight - iconHeight;
  //     document.documentElement.style.setProperty(
  //       "--icon-margin",
  //       `${diff / 2}px`,
  //     );
  //   });
  // });
  // ---------------------------------------

  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: ".project-ghost",
      toggleActions: "play none none none",
      start: "center bottom",
    },
    repeat: -1,
    yoyo: true,
  });

  tl.to(".project-ghost", {
    y: `-=${gsap.utils.random(1, 5)}`,
    ease: "sine.inOut",
    rotation: `-=${gsap.utils.random(1, 3)}`,
    duration: 2,
  });
  tl.to(".project-ghost", {
    y: `+=${gsap.utils.random(1, 10)}`,
    ease: "sine.inOut",
    rotation: `-=${gsap.utils.random(1, 3)}`,
    duration: 2,
  });
</script> -->
